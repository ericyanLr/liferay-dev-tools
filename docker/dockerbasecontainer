#!/bin/bash
#
# Base wrapper for docker

#Global Variables
dockerbasecontainer_options=(
	'exists' 'ip' 'name' 'restart' 'rm' 'shell' 'start' 'status' 'stop'
)
dockerbasecontainer_options_exec=('exec')

#Core Function
dockerbasecontainer() {
	# @description used to add additional basic commands for docker
	# @param $1 container name
	# @param $2 available docker commands listed: dockerbasecontainer_options*
	# @param $... additional parameters based on docker command used
	# @output varies, depending on the command used

	if [ -n "$1" ] && [ -n "$2" ]; then
		case "$1" in
			'exec')
				if [ -n "$3" ]; then
					if [ "$3" == "-d" ] || [ "$3" == "-it" ]; then
						docker exec $3 "$2" "${@:4:${#}}"
					else
						docker exec "$2" "${@:3:${#}}"
					fi

					return
				fi;;
			'exists')
				if [ $(dockerbasecontainer status "$2" | awk 'NR > 1' | wc -l) -gt 0 ]; then
					return 0
				fi

				return 1;;
			'health')
				echo $(docker inspect --format "{{.State.Health.Status }}" $2 2> /dev/null)
				return ;;
			'ip')
				echo $(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}} {{end}}' $2 2> /dev/null) | tr ' ' '\n'
				return;;
			'name')
				if (dockerbasecontainer exists "$2"); then
					echo "$2"
				fi
				
				return;;
			'restart')
				docker restart "$2"
				return;;
			'rm')
				docker rm -f "$2"
				return;;
			'shell')
				docker exec -it "$2" /bin/bash
				return;;
			'start')
				docker start "$2"
				return;;
			'status')
				#docker ps -a -f name="$2$"
				docker ps -a | awk '{if (NR==1 || $NF ~ "^'$2'$"){print}}'
				return;;
			'stop')
				docker stop "$2"
				return;;
		esac
	fi

	echo "Usage: ${FUNCNAME[0]} ($(dockerutil usage_options_formatted ${dockerbasecontainer_options[@]})) <container-name>"
	echo "Usage: ${FUNCNAME[0]} ($(dockerutil usage_options_formatted ${dockerbasecontainer_options_exec[@]})) <container-name> [-d] <command>"
}

#External Functions
dockerutil() {
	# @description reference dockerutil to utilize it's functions
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockerutil"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockerutil"
		return 1
	fi
}

verify_external_functions() {
	# @description check if external functions can be loaded, or else exit the script
	# @output None

	if !(dockerutil > /dev/null); then dockerutil; exit 1; fi
}

#Main
if [ "$0" = "${BASH_SOURCE}" ]; then
	verify_external_functions

	case "$1" in
		'dockerbasecontainer_options')
			echo ${dockerbasecontainer_options[@]};;
		'dockerbasecontainer_options_exec')
			echo ${dockerbasecontainer_options_exec[@]};;
		*)
			dockerbasecontainer "${@}"
	esac

	exit $?
fi