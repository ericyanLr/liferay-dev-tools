#!/bin/bash
#
# docker template for PostgreSQL
# Username: postgres
# Password: test (configured via -e POSTGRES_PASSWORD=test)
# Hostname: localhost
# Port: 5432 (configured via - p5432:5432)

#Functions
dockerpostgresql() {
	# @description create a docker container for PostgreSQL
	# @param $1 available commands listed in usages
	# @param $... additional parameters based on inital command used
	# @output varies, depending on the command used

	local dockerimage="postgres:9.5.3"
	local containername="ldt_postgresql"
	local containercmd=""
	local containeroptions=(
		"-e POSTGRES_PASSWORD=test"
		"-p 5432:5432"
	)

	if [ -n "$1" ]; then
		case "$1" in
			'recreate'|'run'|'start')
				dockercontainer "$1" "${containername}" "${dockerimage}" "${containercmd}" "${containeroptions[@]}";;
			*)
				dockercontainer "$1" "${containername}" "${@:2:${#}}";;
		esac
	else
		echo "Usage: ${FUNCNAME[0]} {$(usage_options_formatted ${dockercontainer_options[@]} ${dockerbasecontainer_options[@]})}"
	fi
}

init_dockercontainer() {
	# @description source dockercontainer to make it's functions available
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockercontainer"

	if [ -f "${scriptpath}" ]; then
		. ${scriptpath}
	else
		echo "Error: Could not load dockercontainer"
		exit 1
	fi
}

#Main
init_dockercontainer

if [ "$0" = "${BASH_SOURCE}" ]; then
	dockerpostgresql "${@}"

	exit $?
fi