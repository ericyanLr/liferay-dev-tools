#!/bin/bash
#
# docker template for DB2 Express
# Username: db2inst1
# Password: test (configured via -e DB2INST1_PASSWORD=test)
# Hostname: localhost
# Port: 50000 (configured via -p 50000:50000)
# DB2(LUW) URL Example: jdbc:db2://localhost:50000/database_name

#Core Function
dockerdb2express() {
	# @description create a docker container for DB2 Express
	# @param $1 available commands listed in usages
	# @param $... additional parameters based on inital command used
	# @output varies, depending on the command used

	local dockerimage="ibmcom/db2express-c:10.5.0.5-3.10.0"
	local containername="ldt_db2express"
	local containercmd="db2start"
	local containeroptions=(
		"-e DB2INST1_PASSWORD=test"
		"-e LICENSE=accept"
		"-p 50000:50000"
	)

	if [ -n "$1" ]; then
		case "$1" in
			'dbcreate')
				if [ -n "$2" ] ; then
					dockercontainer "exec" ${containername} su -c "db2 CREATE DB $2 using codeset UTF-8 territory us PAGESIZE 32768" - db2inst1
					return
				fi;;
			'dbdrop')
				if [ -n "$2" ] ; then
					dockercontainer "exec" ${containername} su -c "db2 DROP DB $2" - db2inst1
					return
				fi;;
			'recreate'|'run'|'start')
				dockercontainer "$1" "${containername}" "${dockerimage}" "${containercmd}" "${containeroptions[@]}";;
			*)
				dockercontainer "$1" "${containername}" "${@:2:${#}}";;
		esac
	else
		dockerutil usage_display ${FUNCNAME[0]} "$(usage)"
	fi
}

usage() {
	# @description organize usages
	# @output string output of usages, formatted
	
	local usage_arr=(
		"$(dockertemplate template_usage)"
		"Usage: \${FUNCNAME[0]} (dbcreate|dbdrop) <database-name>"
	)
	
	dockerutil usage_display_formatted "${usage_arr[@]}"
}

#External Functions
dockerbasecontainer() {
	# @description reference dockerbasecontainer to utilize it's functions
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockerbasecontainer"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockerbasecontainer"
		return 1
	fi
}

dockercontainer() {
	# @description reference dockercontainer to utilize it's functions
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockercontainer"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockercontainer"
		return 1
	fi
}

dockertemplate() {
	# @description reference dockertemplate to utilize it's functions
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockertemplate"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockertemplate"
		return 1
	fi
}

dockerutil() {
	# @description reference dockerutil to utilize it's functions
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockerutil"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockerutil"
		return 1
	fi
}

verify_external_functions() {
	# @description check if external functions can be loaded, or else exit the script
	# @output None

	if !(dockerbasecontainer > /dev/null); then dockerbasecontainer; exit 1; fi
	if !(dockercontainer > /dev/null); then dockercontainer; exit 1; fi
	if !(dockertemplate > /dev/null); then dockercontainer; exit 1; fi
	if !(dockerutil > /dev/null); then dockerutil; exit 1; fi
}

#Main
if [ "$0" = "${BASH_SOURCE}" ]; then
	verify_external_functions

	dockerdb2express "${@}"

	exit $?
fi