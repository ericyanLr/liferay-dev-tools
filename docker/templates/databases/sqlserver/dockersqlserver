#!/bin/bash
#
# docker template for SQL Server
# Username: SA
# Password: <YourStrong!Passw0rd> (configured via -e MSSQL_SA_PASSWORD=\<YourStrong!Passw0rd\>)
# Hostname: localhost
# Port: 1433 (configured via -p 1433:1433)
# JDBC URL Example: jdbc:sqlserver://localhost:1433
#
# Note: Make sure to configure Docker to allocate at least 4GB of ram
#   Info: https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker#requirements
#
# References:
# https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker
# https://docs.microsoft.com/en-us/sql/relational-databases/security/password-policy1

#Core Function
dockersqlserver() {
	# @description create a docker container for SQL Server
	# @param $1 available commands listed in usages
	# @param $... additional parameters based on inital command used
	# @output varies, depending on the command used

	local dockerimage="microsoft/mssql-server-linux:2017-latest"
	local containername="ldt_sqlserver"
	local containercmd=""
	local containeroptions=(
		"-e ACCEPT_EULA=Y"
		"-e MSSQL_SA_PASSWORD=\<YourStrong!Passw0rd\>"
		"-p 1433:1433"
	)

	if [ -n "$1" ]; then
		case "$1" in
			'recreate'|'run'|'start')
				dockercontainer "$1" "${containername}" "${dockerimage}" "${containercmd}" "${containeroptions[@]}";;
			*)
				dockercontainer "$1" "${containername}" "${@:2:${#}}";;
		esac
	else
		local usage_options=(
			$(dockerbasecontainer dockerbasecontainer_options)
			$(dockercontainer dockercontainer_options)
		)

		echo "Usage: ${FUNCNAME[0]} ($(dockerutil usage_options_formatted ${usage_options[@]}))"
	fi
}

#External Functions
dockerbasecontainer() {
	# @description reference dockerbasecontainer to utilize it's functions
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockerbasecontainer"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockerbasecontainer"
		return 1
	fi
}

dockercontainer() {
	# @description reference dockercontainer to utilize it's functions
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockercontainer"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockercontainer"
		return 1
	fi
}

dockerutil() {
	# @description reference dockerutil to utilize it's functions
	# @output None

	local repodir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"
	local scriptpath="${repodir}/docker/dockerutil"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockerutil"
		return 1
	fi
}

verify_external_functions() {
	# @description check if external functions can be loaded, or else exit the script
	# @output None

	if !(dockerbasecontainer > /dev/null); then dockerbasecontainer; exit 1; fi
	if !(dockercontainer > /dev/null); then dockercontainer; exit 1; fi
	if !(dockerutil > /dev/null); then dockerutil; exit 1; fi
}

#Main
if [ "$0" = "${BASH_SOURCE}" ]; then
	verify_external_functions
	
	dockersqlserver "${@}"

	exit $?
fi