#!/bin/bash
#
# docker template for Elasticsearch
# Hostname: localhost
# Port: 9200 (configured via -p 9200:9200)

#Core Function
dockerelasticsearch() {
	# @description create a docker container for Elasticsearch
	# @param $1 available commands listed in usages
	# @param $... additional parameters based on inital command used
	# @output varies, depending on the command used

	local dockerimage="elasticsearch:2.4.4"
	local containername="ldt_elasticsearch"
	local containercmd=""
	local containeroptions=(
		"-p 9200:9200"
		"-p 9300:9300"
	)

	local elasticsearch_options=(
		"cluster.name: LiferayElasticsearchCluster"
		"network.host: 0.0.0.0"
		"http.cors.enabled: true"
		"http.cors.allow-origin: \"*\""
		"http.cors.allow-headers: \"X-Requested-With, Content-Type, Content-Length, X-User\""
	)

	local elasticsearch_options_delimited="$(dockerutil array_to_string_delimited '\\n' "${elasticsearch_options[@]}")"

	if [ -n "$1" ]; then
		case "$1" in
			'recreate'|'run'|'start')
				local init_elastic

				if [ "$1" == 'recreate' ] || (! dockerbasecontainer 'exists' "${containername}"); then
					init_elastic=1
				fi

				dockercontainer "$1" "${containername}" "${dockerimage}" "${containercmd}" "${containeroptions[@]}"

				if [ "${init_elastic}" == "1" ]; then
					dockercontainer exec "${containername}" bash -c 'awk -v options="'"${elasticsearch_options_delimited//\"/\\\"}"'" '\''BEGIN{print options}'\'' > /usr/share/elasticsearch/config/elasticsearch.yml'

					dockerelasticsearch 'restart'
				fi;;
			*)
				dockercontainer "$1" "${containername}" "${@:2:${#}}";;
		esac
	else
		dockerutil usage_display ${FUNCNAME[0]} "$(dockertemplate template_usage)"
	fi
}

#Global Variables
ldt_repo_dir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"

#External Functions
dockercontainer() {
	# @description reference dockercontainer to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockercontainer"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockercontainer"
		return 1
	fi
}

dockertemplate() {
	# @description reference dockertemplate to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockertemplate"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockertemplate"
		return 1
	fi
}

dockerutil() {
	# @description reference dockerutil to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockerutil"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockerutil"
		return 1
	fi
}

verify_external_functions() {
	# @description check if external functions can be loaded, or else exit the script
	# @output None

	if !(dockercontainer > /dev/null); then dockercontainer; exit 1; fi
	if !(dockertemplate > /dev/null); then dockercontainer; exit 1; fi
	if !(dockerutil > /dev/null); then dockerutil; exit 1; fi
}

#Main
if [ "$0" = "${BASH_SOURCE}" ]; then
	verify_external_functions

	dockerelasticsearch "${@}"

	exit $?
fi