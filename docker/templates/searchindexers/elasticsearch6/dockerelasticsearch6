#!/bin/bash
#
# docker template for Elasticsearch 6.1.3
# Hostname: localhost
# Port: 9200
# Transport-Port: 9300

#Core Function
dockerelasticsearch6() {
	# @description create a docker container for Elasticsearch 6.1.3
	# @param $1 available commands listed in usages
	# @param $... additional parameters based on inital command used
	# @output varies, depending on the command used

	local scriptpath="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
	local scriptpath_escaped="$(echo "${scriptpath}" | awk '{gsub(/ /,"\\ ");print}')"

	# Default Elasticsearch - User
	local elasticsearch_xpack_username="elastic"
	local elasticsearch_xpack_password="pleasechangeme"

	# Dockerfile
	# FROM docker.elastic.co/elasticsearch/elasticsearch:6.1.3
	# 
	# Includes elasticsearch plugins used by Liferay
	local dockerfile_path="./Dockerfile"
	local dockerfile_image_name="ldt_elasticsearch_6:latest"

	local docker_image="${dockerfile_image_name}"
	local container_name="ldt_elasticsearch_6"
	local container_cmd=""
	local container_options=(
		"-v ${scriptpath_escaped}/config/x-pack/certificates/certs:/usr/share/elasticsearch/config/x-pack/certificates/certs:ro"
		"-e ELASTIC_PASSWORD=${elasticsearch_xpack_password}"
		"-e discovery.type=single-node"
		"-e cluster.name=LiferayElasticsearchCluster"
		"-e network.host=_local_"
		"-e network.bind_host=0.0.0.0"
		"-e http.cors.enabled=true"
		"-e http.cors.allow-origin=*"
		"-e http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,X-User"
		"-e path.repo=/usr/share/elasticsearch/data/repo"
		"-p 9200:9200"
		"-p 9300:9300"
	)

	local container_xpack_security_options=(
		"-e xpack.license.self_generated.type=trial"
		"-e xpack.security.transport.ssl.verification_mode=certificate"
		"-e xpack.ssl.certificate_authorities=/usr/share/elasticsearch/config/x-pack/certificates/certs/server.crt"
		"-e xpack.ssl.certificate=/usr/share/elasticsearch/config/x-pack/certificates/certs/server.crt"
		"-e xpack.ssl.key=/usr/share/elasticsearch/config/x-pack/certificates/certs/server.key"
	)

	local elasticsearch_configuration_additional_options=(
		"xpack.security.enabled: false"
		"xpack.security.http.ssl.enabled: false"
		"xpack.security.transport.ssl.enabled: false"
	)

	if [ -n "$1" ]; then
		case "$1" in
			'enable_xpack_security')
				if (dockercontainer 'is_running' "${container_name}"); then
					if (! dockerelasticsearch6 'is_xpack_security_enabled'); then
						local enable_xpack_security_options=(
							"sed -i 's/xpack.security.enabled: false/xpack.security.enabled: true/' config/elasticsearch.yml"
							"sed -i 's/xpack.security.http.ssl.enabled: false/xpack.security.http.ssl.enabled: true/' config/elasticsearch.yml"
							"sed -i 's/xpack.security.transport.ssl.enabled: false: false/xpack.security.transport.ssl.enabled: false: true/' config/elasticsearch.yml"
						)

						local enable_xpack_security_options_delimited"=$(dockerutil array_to_string_delimited ';' "${enable_xpack_security_options[@]}")"

						echo "INFO: enabling xpack security.."
						dockercontainer exec "${container_name}" bash -c "${enable_xpack_security_options_delimited}"
						
						echo 'INFO: restarting elasticsearch..'
						dockerelasticsearch6 'restart'
					else
						echo "INFO: xpack security is already enabled."
					fi
				else
					echo "ERROR: Elasticsearch container is not running."
				fi;;
			'disable_xpack_security')
				if (dockercontainer 'is_running' "${container_name}"); then
					if (dockerelasticsearch6 'is_xpack_security_enabled'); then
						local disable_xpack_security_options=(
							"sed -i 's/xpack.security.enabled: true/xpack.security.enabled: false/' config/elasticsearch.yml"
							"sed -i 's/xpack.security.http.ssl.enabled: true/xpack.security.http.ssl.enabled: false/' config/elasticsearch.yml"
							"sed -i 's/xpack.security.transport.ssl.enabled: true/xpack.security.transport.ssl.enabled: false/' config/elasticsearch.yml"
						)

						local disable_xpack_security_options_delimited"=$(dockerutil array_to_string_delimited ';' "${disable_xpack_security_options[@]}")"

						echo "INFO: disabling xpack security.."
						dockercontainer exec "${container_name}" bash -c "${disable_xpack_security_options_delimited}"
						
						echo 'INFO: restarting elasticsearch..'
						dockerelasticsearch6 'restart'
					else
						echo "INFO: xpack security is already disabled."
					fi
				else
					echo "ERROR: Elasticsearch container is not running."
				fi;;
			'is_xpack_security_enabled')
				if (dockercontainer 'is_running' "${container_name}"); then
					if [ $(dockercontainer exec "${container_name}" grep -e "xpack.security.enabled: true" config/elasticsearch.yml | wc -l) -eq 1 ]; then
						return 0
					fi
				fi

				return 1;;
			'recreate'|'run'|'start')
				if (! (dockerutil docker_image_exists "${dockerfile_image_name}")); then
					docker build -t "${dockerfile_image_name}" "${scriptpath}"
				fi

				local init_elastic

				if [ "$1" == 'recreate' ] || (! dockercontainer 'exists' "${container_name}"); then
					init_elastic=1
				fi

				dockercontainer "$1" "${container_name}" "${docker_image}" "${container_cmd}" "${container_options[@]}" "${container_xpack_security_options[@]}"

				if (dockercontainer 'exists' "${container_name}") && [ "${init_elastic}" == "1" ]; then
					echo 'INFO: setting up intial configuration..'

					local configuration_additional_options_delimited"=$(dockerutil array_to_string_delimited '\\n' "${elasticsearch_configuration_additional_options[@]}")"

					dockercontainer exec "${container_name}" bash -c 'awk -v options="'"${configuration_additional_options_delimited//\"/\\\"}"'" '\''BEGIN{print options}'\'' >> /usr/share/elasticsearch/config/elasticsearch.yml'

					echo 'INFO: restarting elasticsearch..'
					dockerelasticsearch6 'restart'

				fi;;
			*)
				dockercontainer "$1" "${container_name}" "${@:2:${#}}";;
		esac
	else
		dockerutil usage_display ${FUNCNAME[0]} "$(dockertemplate template_usage)"
	fi
}

#Global Variables
ldt_repo_dir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"

#External Functions
dockercontainer() {
	# @description reference dockercontainer to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockercontainer"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "Error: Could not load dockercontainer"
		return 1
	fi
}

dockertemplate() {
	# @description reference dockertemplate to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockertemplate"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "Error: Could not load dockertemplate"
		return 1
	fi
}

dockerutil() {
	# @description reference dockerutil to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockerutil"

	if [ -f "${scriptpath}" ]; then
		"${scriptpath}" "$@"
	else
		echo "Error: Could not load dockerutil"
		return 1
	fi
}

verify_external_functions() {
	# @description check if external functions can be loaded, or else exit the script
	# @output None

	if !(dockercontainer > /dev/null); then dockercontainer; exit 1; fi
	if !(dockertemplate > /dev/null); then dockercontainer; exit 1; fi
	if !(dockerutil > /dev/null); then dockerutil; exit 1; fi
}

#Main
if [ "$0" = "${BASH_SOURCE}" ]; then
	if [ "${LDT_DEBUG}" == "1" ]; then
		verify_external_functions
	fi

	dockerelasticsearch6 "${@}"

	exit $?
fi