#!/bin/bash
#
# Wrapper for docker

#Core Function
dockercontainer() {
	# @description used for managing docker containers
	# @param $1 container name
	# @param $2 available docker commands listed: dockerbasecontainer_options*
	# @param $... additional parameters based on docker command used
	# @output varies, depending on the command used

	if [ -n "$1" ] && [ -n "$2" ]; then
		case "$1" in
			'recreate')
				if (dockercontainer exists "$2"); then
					dockerbasecontainer rm "$2"
				fi

				dockercontainer run "${@:2:${#}}"

				return;;
			'run')
				local args_str="${@:5:${#}}"

				# Preserve forward slashes for escaped characters
				local cmd_args=${args_str//\\/\\\\}

				# Preserve single quotes
				cmd_args=${cmd_args//\'/\\\'}

				# Craft docker command to better handle command options with single quotes
				local cmd="$(echo docker run --name "$2" ${cmd_args} -d "$3" $4 | xargs)"

				bash -c "${cmd}"
				return;;
			'start')
				if (! dockerbasecontainer exists "$2"); then
					dockercontainer run "${@:2:${#}}"
				else
					dockerbasecontainer "$1" "$2"
				fi

				return;;
			*)
				dockerbasecontainer "${@}"
				return;;
		esac
	fi

	dockerutil usage_display ${FUNCNAME[0]} "$(usage)"
}

#Global Variables
dockercontainer_options=('recreate' 'run' 'start')

ldt_repo_dir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && git rev-parse --show-toplevel)"

#Functions
usage() {
	# @description organize usages and make re-usable
	# @output string output of usages, formatted
	
	local usage_arr=(
		"Usage: \${FUNCNAME[0]} ($(dockerutil usage_options_formatted ${dockercontainer_options[@]})) <container-name> <docker-image> <container-command>"
		"$(dockerbasecontainer usage)"
	)
	
	dockerutil usage_display_formatted "${usage_arr[@]}"
}

#External Functions
dockerbasecontainer() {
	# @description reference dockerbasecontainer to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockerbasecontainer"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockerbasecontainer"
		return 1
	fi
}

dockerutil() {
	# @description reference dockerutil to utilize it's functions
	# @output None

	local scriptpath="${ldt_repo_dir}/docker/dockerutil"

	if [ -f "${scriptpath}" ]; then
		${scriptpath} "$@"
	else
		echo "Error: Could not load dockerutil"
		return 1
	fi
}

verify_external_functions() {
	# @description check if external functions can be loaded, or else exit the script
	# @output None

	if !(dockerbasecontainer > /dev/null); then dockerbasecontainer; exit 1; fi
	if !(dockerutil > /dev/null); then dockerutil; exit 1; fi
}

#Main
if [ "$0" = "${BASH_SOURCE}" ]; then
	if [ "${LDT_DEBUG}" == "1" ]; then
		verify_external_functions
	fi

	case "$1" in
		'dockercontainer_options')
			echo ${dockercontainer_options[@]};;
		'usage')
			usage;;
		*)
			dockercontainer "${@}"
	esac

	exit $?
fi